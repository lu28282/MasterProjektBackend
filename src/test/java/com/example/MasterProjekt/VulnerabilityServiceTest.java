package com.example.MasterProjekt;

import com.example.MasterProjekt.model.Cpe;
import com.example.MasterProjekt.model.Vulnerability;
import com.example.MasterProjekt.repository.VulnerabilityRepository;
import com.example.MasterProjekt.service.VulnerabilityService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@TestInstance(Lifecycle.PER_CLASS)
@ExtendWith(SpringExtension.class)
public class VulnerabilityServiceTest {

    @Mock
    private VulnerabilityRepository mockVulnerabilityRepository;

    private List<Vulnerability> vulListForVersion;

    private List<Vulnerability> vulListForVersion2;

    private List<Vulnerability> vulListForVersionStartIncluding;
    private List<Vulnerability> vulListForVersionStartIncluding2;
    private List<Vulnerability> vulListForVersionStartIncluding3;
    private List<Vulnerability> vulListForVersionStartIncluding4;

    private List<Vulnerability> vulListVersionStartExcluding;
    private List<Vulnerability> vulListVersionStartExcluding2;
    private List<Vulnerability> vulListVersionStartExcluding3;

    private List<Vulnerability> vulListForVersionEndIncluding;

    private List<Vulnerability> vulListForVersionEndExcluding;

    private List<Vulnerability> vulListForVersionStartIncludingAndEndIncluding;

    private List<Vulnerability> vulListForVersionStartIncludingAndEndExcluding;

    private List<Vulnerability> vulListForVersionStartExcludingAndEndIncluding;

    private List<Vulnerability> vulListForVersionStartExcludingAndEndExcluding;

    @BeforeAll
    public void init() {
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersion();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding2();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding3();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding4();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding2();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding3();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding();
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersion() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("outlook")).thenReturn(vulListForVersion);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertEquals(vulListForVersion, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("outlook")).thenReturn(vulListForVersion2);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertNotEquals(vulListForVersion2, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("outlook")).thenReturn(vulListForVersionStartIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertEquals(vulListForVersionStartIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("outlook")).thenReturn(vulListForVersionStartIncluding2);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertEquals(vulListForVersionStartIncluding2, allVulnerabilitiesBySoftwareAndVersion);
    }
    
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("outlook")).thenReturn(vulListForVersionStartIncluding3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertEquals(vulListForVersionStartIncluding3, allVulnerabilitiesBySoftwareAndVersion);
    }
    
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding4() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("outlook")).thenReturn(vulListForVersionStartIncluding4);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertNotEquals(vulListForVersionStartIncluding4, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("thunderbird")).thenReturn(vulListVersionStartExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("thunderbird", "4.00");

        assertNotEquals(vulListVersionStartExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("thunderbird")).thenReturn(vulListVersionStartExcluding2);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("thunderbird", "5.01");

        assertEquals(vulListVersionStartExcluding2, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("thunderbird")).thenReturn(vulListVersionStartExcluding3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("thunderbird", "5.00");

        assertNotEquals(vulListVersionStartExcluding3, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("openssl")).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "1");

        assertEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("openssl")).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "1.0.0e");

        assertEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("openssl")).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "1.0.1");

        assertNotEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding4() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("openssl")).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "1.0.1");

        assertNotEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("http_server")).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("http_server", "1.3.07.12");

        assertEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("http_server")).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("http_server", "2.2.21");

        assertNotEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("http_server")).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("http_server", "3");

        assertNotEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("phpbb")).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("phpbb", "3.0.0");

        assertEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }
    
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("phpbb")).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("phpbb", "3.0.6");

        assertEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("phpbb")).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("phpbb", "3.0.3");

        assertEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding4() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("phpbb")).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("phpbb", "3.4");

        assertNotEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }
   
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding5() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("phpbb")).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("phpbb", "2.9.1.15");

        assertNotEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("smarty")).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("smarty", "3.0");

        assertEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("smarty")).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("smarty", "3.0.5");

        assertEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("smarty")).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("smarty", "3.0.7");

        assertNotEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }
    
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding4() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("smarty")).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("smarty", "45");

        assertNotEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }
    
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding5() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("smarty")).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("smarty", "2.9.1");

        assertNotEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("big-ip_application_security_manager")).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("big-ip_application_security_manager", "10.0.0");

        assertNotEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("big-ip_application_security_manager")).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("big-ip_application_security_manager", "8.0.0");

        assertNotEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("big-ip_application_security_manager")).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("big-ip_application_security_manager", "10.2.5");

        assertNotEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding4() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("big-ip_application_security_manager")).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("big-ip_application_security_manager", "10.1.5");

        assertEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding5() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("big-ip_application_security_manager")).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("big-ip_application_security_manager", "10.2.4");

        assertEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("roomos")).thenReturn(vulListForVersionStartExcludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("roomos", "9.7.3");

        assertNotEquals(vulListForVersionStartExcludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding2() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("roomos")).thenReturn(vulListForVersionStartExcludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("roomos", "9.8.0");

        assertNotEquals(vulListForVersionStartExcludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding3() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("roomos")).thenReturn(vulListForVersionStartExcludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("roomos", "9.8.01");

        assertNotEquals(vulListForVersionStartExcludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding4() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("roomos")).thenReturn(vulListForVersionStartExcludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("roomos", "9.7.1");

        assertNotEquals(vulListForVersionStartExcludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding5() {
        Mockito.when(mockVulnerabilityRepository.findVulBySoftware("roomos")).thenReturn(vulListForVersionStartExcludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("roomos", "9.7.123");

        assertEquals(vulListForVersionStartExcludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersion() {
        vulListForVersion = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeVersion("outlook", "2001");
        Cpe cpe1_2 = CpeUtil.createCpeVersion("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeVersion("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        // vul 2
        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId("Test2");
        Set<Cpe> cpeSet2 = new HashSet<Cpe>();
        Cpe cpe2_1 = CpeUtil.createCpeVersion("monkeys", "2001");
        Cpe cpe2_2 = CpeUtil.createCpeVersion("outlook", "2001");
        cpeSet2.add(cpe2_1);
        cpeSet2.add(cpe2_2);
        vulnerability2.setCpeSet(cpeSet2);

        vulListForVersion.add(vulnerability1);
        vulListForVersion.add(vulnerability2);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2() {
        vulListForVersion2 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeVersion("outlook", "1999");
        Cpe cpe1_2 = CpeUtil.createCpeVersion("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeVersion("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        // vul 2
        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId("Test2");
        Set<Cpe> cpeSet2 = new HashSet<Cpe>();
        Cpe cpe2_1 = CpeUtil.createCpeVersion("monkeys", "2001");
        Cpe cpe2_2 = CpeUtil.createCpeVersion("outlook", "2001");
        cpeSet2.add(cpe2_1);
        cpeSet2.add(cpe2_2);
        vulnerability2.setCpeSet(cpeSet2);

        vulListForVersion2.add(vulnerability1);
        vulListForVersion2.add(vulnerability2);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding() {
        vulListForVersionStartIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncluding("outlook", "2001");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncluding("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncluding("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding2() {
        vulListForVersionStartIncluding2 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncluding("outlook", "2020");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncluding("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncluding("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncluding2.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding3() {
        vulListForVersionStartIncluding3 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncluding("outlook", "1999");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncluding("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncluding("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncluding3.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding4() {
        vulListForVersionStartIncluding4 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncluding("outlook", "2002");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncluding("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncluding("outlook", "2003");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncluding4.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding() {
        vulListVersionStartExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcluding("outlook", "4.00");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcluding("drupal", "4.7.0");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcluding("thunderbird", "5.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListVersionStartExcluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding2() {
        vulListVersionStartExcluding2 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcluding("outlook", "4.00");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcluding("drupal", "4.7.0");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcluding("thunderbird", "5.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListVersionStartExcluding2.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding3() {
        vulListVersionStartExcluding3 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcluding("outlook", "4.00");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcluding("drupal", "4.7.0");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcluding("thunderbird", "5.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListVersionStartExcluding3.add(vulnerability1);
    }
    

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding() {
        vulListForVersionEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeEndIncluding("openssl", "1.0.0e");
        Cpe cpe1_2 = CpeUtil.createCpeEndIncluding("linux_kernel", "2.6.27.62");
        Cpe cpe1_3 = CpeUtil.createCpeEndIncluding("http_server", "2.2.21");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding() {
        vulListForVersionEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeEndExcluding("openssl", "1.0.0e");
        Cpe cpe1_2 = CpeUtil.createCpeEndExcluding("linux_kernel", "2.6.27.62");
        Cpe cpe1_3 = CpeUtil.createCpeEndExcluding("http_server", "2.2.21");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionEndExcluding.add(vulnerability1);
    }


    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding() {
        vulListForVersionStartIncludingAndEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncludingEndIncluding("phpbb", "3.0.0", "3.0.6");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncludingEndIncluding("linux_kernel", "2.6.0", "2.6.39.4");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncludingEndIncluding("vanilla", "2.0.17.1", "2.0.17.5");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncludingAndEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding() {
        vulListForVersionStartIncludingAndEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncludingEndExcluding("smarty", "3.0.0", "3.0.7");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncludingEndExcluding("linux_kernel", "4.0.x", "5.0.x");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncludingEndExcluding("ios", "12.2", "12.2\\(33\\)sxj1");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncludingAndEndExcluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding() {
        vulListForVersionStartExcludingAndEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcludingEndIncluding("webkitgtk", "2.0.0", "2.26.4");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcludingEndIncluding("big-ip_application_security_manager", "10.0.0",
                "10.2.4");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcludingEndIncluding("thunderbird", "5.0", "10.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartExcludingAndEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding() {
        vulListForVersionStartExcludingAndEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcludingEndExcluding("roomos", "9.7.3", "9.8.0");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcludingEndExcluding("django-rest-registration", "0.1.0", "0.5.0");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcludingEndExcluding("simdjson", "0.1.13", "0.1.15");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartExcludingAndEndExcluding.add(vulnerability1);
    }
}
