package com.example.MasterProjekt;

import com.example.MasterProjekt.model.Cpe;
import com.example.MasterProjekt.model.Vulnerability;
import com.example.MasterProjekt.pojo.SoftwareAndVersion;
import com.example.MasterProjekt.repository.VulnerabilityRepository;
import com.example.MasterProjekt.service.VulnerabilityService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;
import static org.junit.jupiter.api.Assertions.assertNull;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@TestInstance(Lifecycle.PER_CLASS)
@ExtendWith(SpringExtension.class)
public class VulnerabilityServiceTest {

    @Mock
    private VulnerabilityRepository mockVulnerabilityRepository;

    private List<Vulnerability> vulListForVersion;
    private List<Vulnerability> vulListForVersionStartIncluding;
    private List<Vulnerability> vulListVersionStartExcluding;
    private List<Vulnerability> vulListForVersionEndIncluding;
    private List<Vulnerability> vulListForVersionEndExcluding;
    private List<Vulnerability> vulListForVersionStartIncludingAndEndIncluding;
    private List<Vulnerability> vulListForVersionStartIncludingAndEndExcluding;
    private List<Vulnerability> vulListForVersionStartExcludingAndEndIncluding;
    private List<Vulnerability> vulListForVersionStartExcludingAndEndExcluding;

    @BeforeAll
    public void init() {
        initCheckIfVulnerabilitiesAreSetCorrectly();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding();
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForExactVersion() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("outlook", "2000");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersion);

        assertEquals(vulListForVersion, softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForExactVersion2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("outlook", "2005");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersion);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("outlook", "2001");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionStartIncluding);

        assertEquals(vulListForVersionStartIncluding, softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncluding2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("outlook", "2005");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionStartIncluding);

        assertEquals(vulListForVersionStartIncluding, softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncluding3() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("outlook", "1999");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionStartIncluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("outlook", "4.01");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListVersionStartExcluding);

        assertEquals(vulListVersionStartExcluding, softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcluding2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("outlook", "4.00");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListVersionStartExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionEndIncluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("linux_kernel", "2.6.27.62");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionEndIncluding);

        assertEquals(vulListForVersionEndIncluding, softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionEndIncluding2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("linux_kernel", "2.2.27.62");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionEndIncluding);

        assertEquals(vulListForVersionEndIncluding, softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionEndIncluding3() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("linux_kernel", "3.2.27.62");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionEndIncluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionEndExcluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("http_server", "2.2.21");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionEndExcluding2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("http_server", "2.2.01");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionEndExcluding);

        assertEquals(vulListForVersionEndExcluding, softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionEndExcluding3() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("http_server", "3.2.01");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion, vulListForVersionEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndIncluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("phpbb", "3.0.0");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndIncluding);

        assertEquals(vulListForVersionStartIncludingAndEndIncluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndIncluding2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("phpbb", "3.0.6");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndIncluding);

        assertEquals(vulListForVersionStartIncludingAndEndIncluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndIncluding3() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("phpbb", "3.0.3");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndIncluding);

        assertEquals(vulListForVersionStartIncludingAndEndIncluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndIncluding4() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("phpbb", "3.0.7");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndIncluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndExcluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("smarty", "3.0.01");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndExcluding);

        assertEquals(vulListForVersionStartIncludingAndEndExcluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndExcludin2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("smarty", "3.0.0");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndExcluding);

        assertEquals(vulListForVersionStartIncludingAndEndExcluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndExcludin3() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("smarty", "2.9.999");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndExcludin4() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("smarty", "2.0.7");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartIncludingAndEndExcludin5() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("smarty", "2.0.71");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartIncludingAndEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndIncluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("thunderbird", "5");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndIncluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndIncluding2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("thunderbird", "4");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndIncluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndIncluding3() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("thunderbird", "10.1");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndIncluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndIncluding4() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("thunderbird", "10.0");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndIncluding);

        assertEquals(vulListForVersionStartExcludingAndEndIncluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndIncluding5() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("thunderbird", "9");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndIncluding);

        assertEquals(vulListForVersionStartExcludingAndEndIncluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndExcluding() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("django-rest-registration", "0.1.1");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndExcluding);

        assertEquals(vulListForVersionStartExcludingAndEndExcluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndExcluding2() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("django-rest-registration", "0.4.9999");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndExcluding);

        assertEquals(vulListForVersionStartExcludingAndEndExcluding,
                softwareAndVersionIfVulIsPresent.getVulnerabilities());
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndExcluding3() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("django-rest-registration", "0.5");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndExcluding4() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("django-rest-registration", "20");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndExcluding5() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("django-rest-registration", "0.1.0");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    @Test
    public void checkIfVulnerabilitiesAreSetCorrectlyForVersionStartExcludingAndEndExcluding6() {
        Mockito.mock(mockVulnerabilityRepository.getClass());
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        SoftwareAndVersion softwareAndVersion = new SoftwareAndVersion("django-rest-registration", "0.0.1");
        SoftwareAndVersion softwareAndVersionIfVulIsPresent = vulnerabilityService
                .setVulnerabilityForSoftwareAndVersionIfPresent(softwareAndVersion,
                        vulListForVersionStartExcludingAndEndExcluding);

        assertNull(softwareAndVersionIfVulIsPresent);
    }

    private void initCheckIfVulnerabilitiesAreSetCorrectly() {
        vulListForVersion = new ArrayList<Vulnerability>();

        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeVersion("outlook", "2001");
        Cpe cpe1_2 = CpeUtil.createCpeVersion("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeVersion("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersion.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding() {
        vulListForVersionStartIncluding = new ArrayList<Vulnerability>();

        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncluding("outlook", "2001");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncluding("bugzilla", "2.16.1");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncluding("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding() {
        vulListVersionStartExcluding = new ArrayList<Vulnerability>();

        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcluding("outlook", "4.00");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcluding("drupal", "4.7.0");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcluding("thunderbird", "5.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListVersionStartExcluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding() {
        vulListForVersionEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeEndIncluding("openssl", "1.0.0e");
        Cpe cpe1_2 = CpeUtil.createCpeEndIncluding("linux_kernel", "2.6.27.62");
        Cpe cpe1_3 = CpeUtil.createCpeEndIncluding("http_server", "2.2.21");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding() {
        vulListForVersionEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeEndExcluding("openssl", "1.0.0e");
        Cpe cpe1_2 = CpeUtil.createCpeEndExcluding("linux_kernel", "2.6.27.62");
        Cpe cpe1_3 = CpeUtil.createCpeEndExcluding("http_server", "2.2.21");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionEndExcluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding() {
        vulListForVersionStartIncludingAndEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncludingEndIncluding("phpbb", "3.0.0", "3.0.6");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncludingEndIncluding("linux_kernel", "2.6.0", "2.6.39.4");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncludingEndIncluding("vanilla", "2.0.17.1", "2.0.17.5");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncludingAndEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding() {
        vulListForVersionStartIncludingAndEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartIncludingEndExcluding("smarty", "3.0.0", "3.0.7");
        Cpe cpe1_2 = CpeUtil.createCpeStartIncludingEndExcluding("linux_kernel", "4.0.x", "5.0.x");
        Cpe cpe1_3 = CpeUtil.createCpeStartIncludingEndExcluding("ios", "12.2", "12.2\\(33\\)sxj1");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncludingAndEndExcluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding() {
        vulListForVersionStartExcludingAndEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcludingEndIncluding("webkitgtk", "2.0.0", "2.26.4");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcludingEndIncluding("big-ip_application_security_manager", "10.0.0",
                "10.2.4");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcludingEndIncluding("thunderbird", "5.0", "10.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartExcludingAndEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndExcluding() {
        vulListForVersionStartExcludingAndEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = CpeUtil.createCpeStartExcludingEndExcluding("roomos", "9.7.3", "9.8.0");
        Cpe cpe1_2 = CpeUtil.createCpeStartExcludingEndExcluding("django-rest-registration", "0.1.0", "0.5.0");
        Cpe cpe1_3 = CpeUtil.createCpeStartExcludingEndExcluding("simdjson", "0.1.13", "0.1.15");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartExcludingAndEndExcluding.add(vulnerability1);
    }
}
