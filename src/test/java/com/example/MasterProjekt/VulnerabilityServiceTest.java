package com.example.MasterProjekt;

import com.example.MasterProjekt.dao.VulnerabilityRepository;
import com.example.MasterProjekt.model.Cpe;
import com.example.MasterProjekt.model.Vulnerability;
import com.example.MasterProjekt.service.VulnerabilityService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@TestInstance(Lifecycle.PER_CLASS)
@ExtendWith(SpringExtension.class)
public class VulnerabilityServiceTest {

    @Mock
    private VulnerabilityRepository mockVulnerabilityRepository;

    private List<Vulnerability> vulList1;

    private List<Vulnerability> vulList2;

    private List<Vulnerability> vulList3;

    @BeforeAll
    public void init() {
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersion();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding();
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersion() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList1);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertNotEquals(vulList1, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList2);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        Vulnerability vulToRemove = null;
        for (Vulnerability vul : vulList2) {
            if (vul.getId().equals("Test3")) {
                vulToRemove = vul;
            }
        }
        vulList2.remove(vulToRemove);

        assertEquals(vulList2, allVulnerabilitiesBySoftwareAndVersion);
    }
 
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");
        
        assertEquals(vulList3, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "1999");
        
        assertNotEquals(vulList3, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2002");
        
        assertEquals(vulList3, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("bugzilla", "2.16.2");
        
        assertEquals(vulList3, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber5() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("bugzilla", "1.0.3");
        
        assertNotEquals(vulList3, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber6() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulList3);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("bugzilla", "3.15");
        
        assertEquals(vulList3, allVulnerabilitiesBySoftwareAndVersion);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersion() {
        vulList1 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeVersion("outlook", "2001");
        Cpe cpe1_2 = createCpeVersion("bugzilla", "2.16.1");
        Cpe cpe1_3 = createCpeVersion("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        // vul 2
        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId("Test2");
        Set<Cpe> cpeSet2 = new HashSet<Cpe>();
        Cpe cpe2_1 = createCpeVersion("monkeys", "2001");
        Cpe cpe2_2 = createCpeVersion("outlook", "2001");
        cpeSet2.add(cpe2_1);
        cpeSet2.add(cpe2_2);
        vulnerability2.setCpeSet(cpeSet2);

        // vul 3
        Vulnerability vulnerability3 = new Vulnerability();
        vulnerability3.setId("Test3");
        Set<Cpe> cpeSet3 = new HashSet<Cpe>();
        Cpe cpe3_1 = createCpeVersion("outlooksy", "2001");
        cpeSet3.add(cpe3_1);
        vulnerability3.setCpeSet(cpeSet3);

        // vul 3
        Vulnerability vulnerability4 = new Vulnerability();
        vulnerability4.setId("Test4");
        Set<Cpe> cpeSet4 = new HashSet<Cpe>();
        Cpe cpe4_1 = createCpeVersion("outlooksy", "2001");
        cpe4_1.setVersionEndExcluding("2001");
        cpe4_1.setVersionEndIncluding("2001");
        cpe4_1.setVersionStartExcluding("2001");
        cpe4_1.setVersionStartIncluding("2001");
        cpeSet4.add(cpe4_1);
        vulnerability4.setCpeSet(cpeSet4);

        vulList1.add(vulnerability1);
        vulList1.add(vulnerability2);
        vulList1.add(vulnerability3);
        vulList1.add(vulnerability4);

    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2() {
        vulList2 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeVersion("outlook", "2001");
        Cpe cpe1_2 = createCpeVersion("bugzilla", "2.16.1");
        Cpe cpe1_3 = createCpeVersion("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        // vul 2
        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId("Test2");
        Set<Cpe> cpeSet2 = new HashSet<Cpe>();
        Cpe cpe2_1 = createCpeVersion("monkeys", "2001");
        Cpe cpe2_2 = createCpeVersion("outlook", "2001");
        cpeSet2.add(cpe2_1);
        cpeSet2.add(cpe2_2);
        vulnerability2.setCpeSet(cpeSet2);

        // vul 3
        Vulnerability vulnerability3 = new Vulnerability();
        vulnerability3.setId("Test3");
        Set<Cpe> cpeSet3 = new HashSet<Cpe>();
        Cpe cpe3_1 = createCpeVersion("outlooksy", "2001");
        cpeSet3.add(cpe3_1);
        vulnerability3.setCpeSet(cpeSet3);

        vulList2.add(vulnerability1);
        vulList2.add(vulnerability2);
        vulList2.add(vulnerability3);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding(){
        vulList3 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeStartIncluding("outlook", "2001");
        Cpe cpe1_2 = createCpeStartIncluding("bugzilla", "2.16.1");
        Cpe cpe1_3 = createCpeStartIncluding("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulList3.add(vulnerability1);
    }
    
    private Cpe createCpeVersion(String software, String version) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersion(version);
        return cpe;
    }

    private Cpe createCpeStartIncluding(String software, String versionStartIncluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionStartIncluding(versionStartIncluding);
        return cpe;
    }
}
