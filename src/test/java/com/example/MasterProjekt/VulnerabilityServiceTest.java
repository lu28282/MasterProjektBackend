package com.example.MasterProjekt;

import com.example.MasterProjekt.dao.VulnerabilityRepository;
import com.example.MasterProjekt.model.Cpe;
import com.example.MasterProjekt.model.Vulnerability;
import com.example.MasterProjekt.service.VulnerabilityService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotEquals;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.api.TestInstance.Lifecycle;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.springframework.test.context.junit.jupiter.SpringExtension;

@TestInstance(Lifecycle.PER_CLASS)
@ExtendWith(SpringExtension.class)
public class VulnerabilityServiceTest {

    @Mock
    private VulnerabilityRepository mockVulnerabilityRepository;

    private List<Vulnerability> vulListForVersion;

    private List<Vulnerability> vulListForVersion2;

    private List<Vulnerability> vulListForVersionStartIncluding;

    private List<Vulnerability> vulListVersionStartExcluding;

    private List<Vulnerability> vulListForVersionEndIncluding;

    private List<Vulnerability> vulListForVersionEndExcluding;

    private List<Vulnerability> vulListForVersionStartIncludingAndEndIncluding;

    private List<Vulnerability> vulListForVersionStartIncludingAndEndExcluding;

    private List<Vulnerability> vulListForVersionStartExcludingAndEndIncluding;

    @BeforeAll
    public void init() {
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersion();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding();
        initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding();
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersion() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersion);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        assertNotEquals(vulListForVersion, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersion2);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");

        Vulnerability vulToRemove = null;
        for (Vulnerability vul : vulListForVersion2) {
            if (vul.getId().equals("Test3")) {
                vulToRemove = vul;
            }
        }
        vulListForVersion2.remove(vulToRemove);

        assertEquals(vulListForVersion2, allVulnerabilitiesBySoftwareAndVersion);
    }
 
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2001");
        
        assertEquals(vulListForVersionStartIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "1999");
        
        assertNotEquals(vulListForVersionStartIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("outlook", "2002");
        
        assertEquals(vulListForVersionStartIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("bugzilla", "2.16.2");
        
        assertEquals(vulListForVersionStartIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber5() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("bugzilla", "1.0.3");
        
        assertNotEquals(vulListForVersionStartIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingNumber6() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("bugzilla", "3.15");
        
        assertEquals(vulListForVersionStartIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }
   
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListVersionStartExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("sophos_anti-virus", "4.00");
        
        assertNotEquals(vulListVersionStartExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }
   
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListVersionStartExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("sophos_anti-virus", "4.00.1");
        
        assertEquals(vulListVersionStartExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }
   
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListVersionStartExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("DrUPal", "4.7.1");
        
        assertEquals(vulListVersionStartExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }
   
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListVersionStartExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("Morzilla Thunderbird", "6");
        
        assertNotEquals(vulListVersionStartExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }
    
    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("open", "1");
        
        assertNotEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "1");
        
        assertEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "0.99");
        
        assertEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "1.0.0e");
        
        assertEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding5() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("openssl", "2.0.4");
        
        assertNotEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding6() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("linux_kernel", "2.0.4");
        
        assertEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding7() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("linux_kernel", "2.6.27.62.1");
        
        assertNotEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding8() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("http_server", "2.2.21");
        
        assertEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding9() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("http_server", "2.2.22");
        
        assertNotEquals(vulListForVersionEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("maradns", "1.3.07.12");
        
        assertNotEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("maradns", "1.3.07.10");
        
        assertEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("mediawiki", "1.18.1");
        
        assertNotEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("mediawiki", "1.3");
        
        assertEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding5() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("mediawiki", "1.30");
        
        assertNotEquals(vulListForVersionEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("phpbb", "3.0.0");
        
        assertEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("phpbb", "3.0.6");
        
        assertEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("linux_kernel", "2.6.20");
        
        assertEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("linux_kernel", "2.6.39.1");
        
        assertEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding5() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("vanill", "2.0.17.1");
        
        assertNotEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding6() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("vanilla", "2.0.17.0");
        
        assertNotEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding7() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("vanilla", "2.0.18.0");
        
        assertNotEquals(vulListForVersionStartIncludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("linux_kernel", "4.1");
        
        assertEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("linux_kernel", "5.0.1");
        
        assertEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("smarty", "3.0.0");
        
        assertEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("smarty", "3.0.7");
        
        assertNotEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding5() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("ios", "12.2");
        
        assertEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding6() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("ios", "12.22");
        
        assertNotEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding7() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartIncludingAndEndExcluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("ios", "12.2.2");
        
        assertNotEquals(vulListForVersionStartIncludingAndEndExcluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("webkitgtk", "2.0.0");
        
        assertNotEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding2() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("big-ip_application_security_manager", "10.1.99");
        
        assertEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding3() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("thunderbird", "10.1.99");
        
        assertNotEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding4() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("thunderbird", "10.0");
        
        assertEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    @Test
    public void getCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding5() {
        Mockito.when(mockVulnerabilityRepository.findAll()).thenReturn(vulListForVersionStartExcludingAndEndIncluding);
        VulnerabilityService vulnerabilityService = new VulnerabilityService(mockVulnerabilityRepository);
        List<Vulnerability> allVulnerabilitiesBySoftwareAndVersion = vulnerabilityService
                .getAllVulnerabilitiesBySoftwareAndVersion("thunderbird", "4.0");
        
        assertNotEquals(vulListForVersionStartExcludingAndEndIncluding, allVulnerabilitiesBySoftwareAndVersion);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersion() {
        vulListForVersion = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeVersion("outlook", "2001");
        Cpe cpe1_2 = createCpeVersion("bugzilla", "2.16.1");
        Cpe cpe1_3 = createCpeVersion("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        // vul 2
        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId("Test2");
        Set<Cpe> cpeSet2 = new HashSet<Cpe>();
        Cpe cpe2_1 = createCpeVersion("monkeys", "2001");
        Cpe cpe2_2 = createCpeVersion("outlook", "2001");
        cpeSet2.add(cpe2_1);
        cpeSet2.add(cpe2_2);
        vulnerability2.setCpeSet(cpeSet2);

        // vul 3
        Vulnerability vulnerability3 = new Vulnerability();
        vulnerability3.setId("Test3");
        Set<Cpe> cpeSet3 = new HashSet<Cpe>();
        Cpe cpe3_1 = createCpeVersion("outlooksy", "2001");
        cpeSet3.add(cpe3_1);
        vulnerability3.setCpeSet(cpeSet3);

        // vul 3
        Vulnerability vulnerability4 = new Vulnerability();
        vulnerability4.setId("Test4");
        Set<Cpe> cpeSet4 = new HashSet<Cpe>();
        Cpe cpe4_1 = createCpeVersion("outlooksy", "2001");
        cpe4_1.setVersionEndExcluding("2001");
        cpe4_1.setVersionEndIncluding("2001");
        cpe4_1.setVersionStartExcluding("2001");
        cpe4_1.setVersionStartIncluding("2001");
        cpeSet4.add(cpe4_1);
        vulnerability4.setCpeSet(cpeSet4);

        vulListForVersion.add(vulnerability1);
        vulListForVersion.add(vulnerability2);
        vulListForVersion.add(vulnerability3);
        vulListForVersion.add(vulnerability4);

    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionNumber2() {
        vulListForVersion2 = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeVersion("outlook", "2001");
        Cpe cpe1_2 = createCpeVersion("bugzilla", "2.16.1");
        Cpe cpe1_3 = createCpeVersion("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        // vul 2
        Vulnerability vulnerability2 = new Vulnerability();
        vulnerability2.setId("Test2");
        Set<Cpe> cpeSet2 = new HashSet<Cpe>();
        Cpe cpe2_1 = createCpeVersion("monkeys", "2001");
        Cpe cpe2_2 = createCpeVersion("outlook", "2001");
        cpeSet2.add(cpe2_1);
        cpeSet2.add(cpe2_2);
        vulnerability2.setCpeSet(cpeSet2);

        // vul 3
        Vulnerability vulnerability3 = new Vulnerability();
        vulnerability3.setId("Test3");
        Set<Cpe> cpeSet3 = new HashSet<Cpe>();
        Cpe cpe3_1 = createCpeVersion("outlooksy", "2001");
        cpeSet3.add(cpe3_1);
        vulnerability3.setCpeSet(cpeSet3);

        vulListForVersion2.add(vulnerability1);
        vulListForVersion2.add(vulnerability2);
        vulListForVersion2.add(vulnerability3);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncluding(){
        vulListForVersionStartIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeStartIncluding("outlook", "2001");
        Cpe cpe1_2 = createCpeStartIncluding("bugzilla", "2.16.1");
        Cpe cpe1_3 = createCpeStartIncluding("outlook", "2000");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncluding.add(vulnerability1);
    }
    
    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcluding() {
        vulListVersionStartExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeStartExcluding("sophos_anti-virus", "4.00");
        Cpe cpe1_2 = createCpeStartExcluding("drupal", "4.7.0");
        Cpe cpe1_3 = createCpeStartExcluding("thunderbird", "5.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListVersionStartExcluding.add(vulnerability1);
    }
    
    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndIncluding() {
        vulListForVersionEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeEndIncluding("openssl", "1.0.0e");
        Cpe cpe1_2 = createCpeEndIncluding("linux_kernel", "2.6.27.62");
        Cpe cpe1_3 = createCpeEndIncluding("http_server", "2.2.21");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionEndExcluding() {
        vulListForVersionEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeEndExcluding("maradns", "1.3.07.12");
        Cpe cpe1_2 = createCpeEndExcluding("linux_kernel", "3.1.9");
        Cpe cpe1_3 = createCpeEndExcluding("mediawiki", "1.18.1");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionEndExcluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndIncluding() {
        vulListForVersionStartIncludingAndEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeStartIncludingEndIncluding("phpbb", "3.0.0", "3.0.6");
        Cpe cpe1_2 = createCpeStartIncludingEndIncluding("linux_kernel", "2.6.0", "2.6.39.4");
        Cpe cpe1_3 = createCpeStartIncludingEndIncluding("vanilla", "2.0.17.1", "2.0.17.5");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncludingAndEndIncluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartIncludingAndEndExcluding() {
        vulListForVersionStartIncludingAndEndExcluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeStartIncludingEndExcluding("smarty", "3.0.0", "3.0.7");
        Cpe cpe1_2 = createCpeStartIncludingEndExcluding("linux_kernel", "4.0.x", "5.0.x");
        Cpe cpe1_3 = createCpeStartIncludingEndExcluding("ios", "12.2", "12.2\\(33\\)sxj1");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartIncludingAndEndExcluding.add(vulnerability1);
    }

    private void initgetCorrectVulnerabilitiesBySoftwareAndVersionForVersionStartExcludingAndEndIncluding() {
        vulListForVersionStartExcludingAndEndIncluding = new ArrayList<Vulnerability>();
        // vul 1
        Vulnerability vulnerability1 = new Vulnerability();
        vulnerability1.setId("Test1");
        Set<Cpe> cpeSet1 = new HashSet<Cpe>();
        Cpe cpe1_1 = createCpeStartExcludingEndIncluding("webkitgtk", "2.0.0", "2.26.4");
        Cpe cpe1_2 = createCpeStartExcludingEndIncluding("big-ip_application_security_manager", "10.0.0", "10.2.4");
        Cpe cpe1_3 = createCpeStartExcludingEndIncluding("thunderbird", "5.0", "10.0");
        cpeSet1.add(cpe1_1);
        cpeSet1.add(cpe1_2);
        cpeSet1.add(cpe1_3);
        vulnerability1.setCpeSet(cpeSet1);

        vulListForVersionStartExcludingAndEndIncluding.add(vulnerability1);
    }

    private Cpe createCpeVersion(String software, String version) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersion(version);
        return cpe;
    }

    private Cpe createCpeStartIncluding(String software, String versionStartIncluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionStartIncluding(versionStartIncluding);
        return cpe;
    }

    private Cpe createCpeStartExcluding(String software, String versionStartExcluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionStartExcluding(versionStartExcluding);
        return cpe;
    }
    
    private Cpe createCpeEndIncluding(String software, String versionEndIncluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionEndIncluding(versionEndIncluding);
        return cpe;
    }

    private Cpe createCpeEndExcluding(String software, String versionEndExcluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionEndExcluding(versionEndExcluding);
        return cpe;
    }

    private Cpe createCpeStartIncludingEndIncluding(String software, String versionStartIncluding, String versionEndIncluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionStartIncluding(versionStartIncluding);
        cpe.setVersionEndIncluding(versionEndIncluding);
        return cpe;
    }

    private Cpe createCpeStartIncludingEndExcluding(String software, String versionStartIncluding, String versionEndExcluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionStartIncluding(versionStartIncluding);
        cpe.setVersionEndExcluding(versionEndExcluding);
        return cpe;
    }

    private Cpe createCpeStartExcludingEndIncluding(String software, String versionStartExcluding, String versionEndIncluding) {
        Cpe cpe = new Cpe();
        cpe.setSoftware(software);
        cpe.setVersionStartExcluding(versionStartExcluding);
        cpe.setVersionEndIncluding(versionEndIncluding);
        return cpe;
    }

}
