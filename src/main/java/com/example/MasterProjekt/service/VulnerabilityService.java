package com.example.MasterProjekt.service;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;

import com.example.MasterProjekt.model.Cpe;
import com.example.MasterProjekt.model.Vulnerability;
import com.example.MasterProjekt.repository.VulnerabilityRepository;

import org.apache.maven.artifact.versioning.DefaultArtifactVersion;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Async;
import org.springframework.scheduling.annotation.EnableAsync;
import org.springframework.stereotype.Service;

@Service
@EnableAsync
public class VulnerabilityService {

    private VulnerabilityRepository vulnerabilityRepository;

    @Autowired
    public VulnerabilityService(VulnerabilityRepository vulnerabilityRepository) {
        this.vulnerabilityRepository = vulnerabilityRepository;
    }

    public List<Vulnerability> getAllVulnerabilities() {
        return vulnerabilityRepository.findAll();
    }

    public List<Vulnerability> getAllVulnerabilitiesBySoftwareAndVersion(String software, String version) {

        CompletableFuture<List<Vulnerability>> allVulnerabilitiesMatchingSoftware = vulnerabilityRepository
                .findVulBySoftware(software);

        CompletableFuture<List<Vulnerability>> matchingVulnerabilitiesCF = allVulnerabilitiesMatchingSoftware
                .thenApply((vuls) -> matchVulnerabilities(vuls, software, version));

        List<Vulnerability> matchingVulnerabilities = new ArrayList<Vulnerability>();

        try {
            matchingVulnerabilities = matchingVulnerabilitiesCF.get();
        } catch (InterruptedException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        } catch (ExecutionException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

        return matchingVulnerabilities;
    }

    @Async
    private List<Vulnerability> matchVulnerabilities(List<Vulnerability> allVulnerabilitiesMatchingSoftware,
            String software, String version) {
        long startTimeRepo = System.currentTimeMillis();

        List<Vulnerability> matchingVulnerabilities = new ArrayList<Vulnerability>();

        int allVulnerabilitiesMatchingSoftwareSize = allVulnerabilitiesMatchingSoftware.size();
        for (int i = 0; i < allVulnerabilitiesMatchingSoftwareSize; i++) {
            Vulnerability matchingVul = checkIfCpeSoftwareMatches(allVulnerabilitiesMatchingSoftware.get(i), software,
                    version);
            if (matchingVul != null) {
                matchingVulnerabilities.add(matchingVul);
            }
        }

        long endTimeRepo = System.currentTimeMillis();
        System.out.println("getAllVulnerabilitiesBySoftwareAndVersion time: " + (endTimeRepo - startTimeRepo));

        return matchingVulnerabilities;
    }

    @Async
    private Vulnerability checkIfCpeSoftwareMatches(Vulnerability vulnerability, String software, String version) {
        long startTimeRepo = System.currentTimeMillis();

        Set<Cpe> cpeSet = vulnerability.getCpeSet();
        Iterator<Cpe> cpeItr = cpeSet.iterator();

        while (cpeItr.hasNext()) {
            Cpe cpe = cpeItr.next();
            if (cpe.getSoftware().equalsIgnoreCase(software) && cpeMatchesVersions(cpe, version)) {
                return vulnerability;
            }
        }

        long endTimeRepo = System.currentTimeMillis();
        System.out.println("checkIfCpeSoftwareMatches time: " + (endTimeRepo - startTimeRepo));

        return null;
    }

    @Async
    private boolean cpeMatchesVersions(Cpe cpe, String version) {
        long startTimeRepo = System.currentTimeMillis();

        boolean matchesVersions = false;
        String versionStartIncluding = cpe.getVersionStartIncluding();
        String versionStartExcluding = cpe.getVersionStartExcluding();
        String versionEndIncluding = cpe.getVersionEndIncluding();
        String versionEndExcluding = cpe.getVersionEndExcluding();
        DefaultArtifactVersion googleVersion = new DefaultArtifactVersion(version);
        // Version matching
        if (!(cpe.getVersion() == null)) {
            DefaultArtifactVersion cpeVersion = new DefaultArtifactVersion(cpe.getVersion());
            if (googleVersion.compareTo(cpeVersion) == 0) {
                matchesVersions = true;
            }
        } // StartIncluding + EndExcluding
        else if (!(versionStartIncluding == null) && !(versionEndExcluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionStartIncluding = new DefaultArtifactVersion(versionStartIncluding);
            DefaultArtifactVersion cpeVersionEndExcluding = new DefaultArtifactVersion(versionEndExcluding);
            if (googleVersion.compareTo(cpeVersionStartIncluding) == 0
                    || googleVersion.compareTo(cpeVersionStartIncluding) > 0) {
                if (googleVersion.compareTo(cpeVersionEndExcluding) < 0) {
                    matchesVersions = true;
                }
            }
        } // StartIncluding + EndIncluding
        else if (!(versionStartIncluding == null) && !(versionEndIncluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionStartIncluding = new DefaultArtifactVersion(versionStartIncluding);
            DefaultArtifactVersion cpeVersionEndIncluding = new DefaultArtifactVersion(versionEndIncluding);
            if (googleVersion.compareTo(cpeVersionStartIncluding) == 0
                    || googleVersion.compareTo(cpeVersionStartIncluding) > 0) {
                if (googleVersion.compareTo(cpeVersionEndIncluding) == 0
                        || googleVersion.compareTo(cpeVersionEndIncluding) < 0) {
                    matchesVersions = true;
                }
            }
        } // StartExcluding + EndIncluding
        else if (!(versionStartExcluding == null) && !(versionEndIncluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionStartExcluding = new DefaultArtifactVersion(versionStartExcluding);
            DefaultArtifactVersion cpeVersionEndIncluding = new DefaultArtifactVersion(versionEndIncluding);
            if (googleVersion.compareTo(cpeVersionStartExcluding) > 0) {
                if (googleVersion.compareTo(cpeVersionEndIncluding) == 0
                        || googleVersion.compareTo(cpeVersionEndIncluding) < 0) {
                    matchesVersions = true;
                }
            }
        } // StartExcluding + EndExcluding
        else if (!(versionStartExcluding == null) && !(versionEndExcluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionStartExcluding = new DefaultArtifactVersion(versionStartExcluding);
            DefaultArtifactVersion cpeVersionEndExcluding = new DefaultArtifactVersion(versionEndExcluding);
            if (googleVersion.compareTo(cpeVersionStartExcluding) > 0) {
                if (googleVersion.compareTo(cpeVersionEndExcluding) < 0) {
                    matchesVersions = true;
                }
            }
        } // StartIncluding
        else if (!(versionStartIncluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionStartIncluding = new DefaultArtifactVersion(versionStartIncluding);
            if (googleVersion.compareTo(cpeVersionStartIncluding) == 0
                    || googleVersion.compareTo(cpeVersionStartIncluding) > 0) {
                matchesVersions = true;
            }
        } // StartExcluding
        else if (!(versionStartExcluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionStartExcluding = new DefaultArtifactVersion(versionStartExcluding);
            if (googleVersion.compareTo(cpeVersionStartExcluding) > 0) {
                matchesVersions = true;
            }
        } // EndIncluding
        else if (!(versionEndIncluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionEndIncluding = new DefaultArtifactVersion(versionEndIncluding);
            if (googleVersion.compareTo(cpeVersionEndIncluding) == 0
                    || googleVersion.compareTo(cpeVersionEndIncluding) < 0) {
                matchesVersions = true;
            }
        } // EndExcluding
        else if (!(versionEndExcluding == null) && !matchesVersions) {
            DefaultArtifactVersion cpeVersionEndExcluding = new DefaultArtifactVersion(versionEndExcluding);
            if (googleVersion.compareTo(cpeVersionEndExcluding) < 0) {
                matchesVersions = true;
            }
        }

        long endTimeRepo = System.currentTimeMillis();
        System.out.println("checkIfCpeSoftwareMatches time: " + (endTimeRepo - startTimeRepo));

        return matchesVersions;
    }
}
